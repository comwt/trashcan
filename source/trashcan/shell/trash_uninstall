#set -x
################################################################################
#
# Copyright (C) 2001-2012
# by Justin Francis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
################################################################################

clear screen 

./modules/TestHelp.sh "$*"
if [[ $? -gt 0 ]]; then
  ./modules/Help.sh $0
  exit 0;
fi

./modules/TestDebug.sh "$*"
if [[ $? -gt 0 ]]; then
  export TRASHCAN_DEBUG_FLAG=1
else
  export TRASHCAN_DEBUG_FLAG=0
fi

clear screen
echo "

#     #                 ###
#     #  #    #          #     #    #   ####    #####    ##    #       #
#     #  ##   #          #     ##   #  #          #     #  #   #       #
#     #  # #  #  #####   #     # #  #   ####      #    #    #  #       #
#     #  #  # #          #     #  # #       #     #    ######  #       #
#     #  #   ##          #     #   ##  #    #     #    #    #  #       #
 #####   #    #         ###    #    #   ####      #    #    #  ######  ######

#######                                          #####
   #     #####     ##     ####   #    #         #     #    ##    #    #
   #     #    #   #  #   #       #    #         #         #  #   ##   #
   #     #    #  #    #   ####   ######         #        #    #  # #  #
   #     #####   ######       #  #    #         #        ######  #  # #
   #     #   #   #    #  #    #  #    #         #     #  #    #  #   ##
   #     #    #  #    #   ####   #    #          #####   #    #  #    #
"

echo "
                                                                                       
---------------------------------------------------------------------------

This will un-install the Trash Can"

printf "Do you wish to proceed? (Y/N): "
read ANSW

ANSW=`echo ${ANSW} | cut -c1`

if [[ ${ANSW} != "Y" && ${ANSW} != "y" ]]; then
  echo "Trash Can Un-Install ABORTING."
  echo ""
  exit 0;
fi

export HDIR=$PWD

################################################################################
################################################################################
#                                                                              #
#             B E G I N    F U N C T I O N    D E F I N I T I O N S            #
#                                                                              #
################################################################################
################################################################################


################################################################################
GetConfUninstallSpecifics() {
#
# Purpose: Gathers trash.conf variables for the current user.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: GetConfUninstallSpecifics()"
  fi

  #- Gather Trash Can paths from trash.conf
  #-----------------------------------------
  TDIR=`awk '$1 ~ /TrashDir/ {print $3}' ${TRASHCAN_CONF_FILE}`
  BIN=`awk '$1 ~ /TrashBIN/ {print $3}' ${TRASHCAN_CONF_FILE}`
  PFILE=`awk '$1 ~ /ProFile/ {print $3}' ${TRASHCAN_CONF_FILE}`
  PFILE2="${HDIR}/contents/backup/temp_profile.out"

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "  DEBUG:   TDIR=${TDIR}"
    echo "  DEBUG:    BIN=${BIN}"
    echo "  DEBUG:  PFILE=${PFILE}"
    echo "  DEBUG: PFILE2=${PFILE2}"
    echo "DEBUG: GetConfUninstallSpecifics() - Finished"
  fi

}
##########-------- END FUNCTION - GetConfUninstallSpecifics() --------##########


################################################################################
TDIR_Remove() {
#
# Purpose: Remove the .trash[?] directory from current user's home directory.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: TDIR_Remove()"
  fi

  printf "  Removing the directory [ ${TDIR} ] ..... "
  rm -fr ${TDIR} && echo "DONE"

}
##########--------------- END FUNCTION - TDIR_Remove() ---------------##########


################################################################################
BIN_Remove() {
#
# Purpose: Remove the trash script.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: BIN_Remove()"
  fi

  printf "  Removing the executable ..... "
  rm -fr ${BIN}/trash.sh && echo "DONE"

}
##########---------------- END FUNCTION - BIN_Remove() ---------------##########


################################################################################
RestoreProfile() {
#
# Purpose: Clears all trashcan aliases from current user's profile.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: RestoreProfile()"
  fi

  printf "  Removing aliases from ${PFILE} ..... "

  #- Delete Trash Can aliases from profile
  #----------------------------------------
  sed '/^\#- Trash Can/d' ${PFILE} > ${PFILE2}
  sed '/TRASHDIR/d' ${PFILE2} > ${PFILE}
  sed '/^TBINDIR/d' ${PFILE} > ${PFILE2}
  sed '/^purge \#-- Daily Old Trash Purge/d' ${PFILE2} > ${PFILE}

  echo "DONE"

}
##########-------------- END FUNCTION - RestoreProfile() -------------##########


################################################################################
RemoveFromUserList() {
#
# Purpose: Deletes user entry from the Administrator's users.list file
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: RemoveFromUserList()"
  fi

  printf "  Deleting user '${USER_TRASH_HOME}' from users.list ..... "

  #- Delete user from root's user.list file
  #-----------------------------------------
  echo ${USER_TRASH_HOME} | sed 's@/@\\/@g' > temp_sed.out
  MOD_USER_TRASH_HOME=`cat temp_sed.out`
  sed /^${MOD_USER_TRASH_HOME}/d ${ULFILE} > ${ULFILE2}

  mv ${ULFILE2} ${ULFILE}
  rm temp_sed.out

  echo "DONE"

}
##########------------ END FUNCTION - RemoveFromUserList() -----------##########


################################################################################
Length() {
#
# Purpose: Format spacing for long lists.
#-------------------------------------------------------------------------------

  LENGTH=`echo ${STEP} | awk '{print length}'`
  case "${LENGTH}" in
    1)  SPC="   ";;
    2)  SPC="  ";;
    3)  SPC=" ";;
    4)  SPC="";;
  esac

}
##########------------------ END FUNCTION - Length() -----------------##########


################################################################################
ListUsers() {
#
# Purpose: Used in conjunction with SelectUser(); prints actual current users.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: ListUsers()"
  fi

  STEP=1
  for i in `awk -F"|" '{print $1}' ${ULFILE} | sort`
    do
      Length     #-- Function Call
      echo "${SPC}${STEP}) ${i}"
      TRASH_USERS_ARR[${STEP}]=${i}
      (( STEP += 1 ))
    done

}
##########---------------- END FUNCTION - ListUsers() ----------------##########


################################################################################
SelectUser() {
#
# Purpose: Displays possible users until a relevant one is chosen.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: SelectUser()"
  fi

  USER_DEL_TRASH_ACCEPT=0

  until [[ ${USER_DEL_TRASH_ACCEPT} -eq 1 ]]
    do
      clear; echo "

Current Trash Can Users:
"
            
      ListUsers  #-- Function Call
      Length     #-- Function Call
      echo "${SPC}${STEP}) Exit (Not Shown)"
      echo ""
      printf "Uninstall Trash Can for (1 - ${STEP}): "
      read ANSW
      echo ""

      #- If a non-digit character is intered the program will fail
      #  in the numeric comparison in the until loop.
      #--------------------------------------------------------------
      if [[ ${ANSW} != [[:digit:]] ]]; then
        if [[ ${ANSW} == [[:alpha:]] || ${ANSW} == [[:alnum:]] ]]; then
          ANSW=0
        fi
      fi

      #- If user chooses to EXIT.
      #--------------------------
      if [[ ${ANSW} == "${STEP}" ]]; then
        echo ""
        if [[ ${USERS_DELETED} -eq 0 ]]; then
          echo "No changes have been made."
        else
          GRAMMAR="users have"
          if  [[ ${USERS_DELETED} -eq 1 ]]; then
            GRAMMAR="user has"
          fi
          echo "${USERS_DELETED} ${GRAMMAR} had trashcan removed."
        fi
        echo ""
        exit 0
      fi

      if [[ ${ANSW} -lt 1 || ${ANSW} -gt ${STEP} ]]; then
        ANSW=0
        echo "Invalid Entry."; sleep 1
        continue;
      fi

      DEL_ADMIN_FLAG=0

      #- Warn if trying to uninstall trashcan for Administrator and 
      #  there are still other users
      #-------------------------------------------------------------
      if [[ ${STEP} -gt 2 ]]; then

        if [[ ${TRASH_USERS_ARR[${ANSW}]} == ${ROOT_HOME} ]]; then

          DEL_ADMIN_FLAG=1

          echo "
  #####################################################################
  # WARNING: By deleting the Administrator's trashcan account, before #
  #          deleting all other user trashcan accounts, you will lose #
  #          the ability to dynamically remove those accounts later.  #
  #          It will have to be done manually.                        #
  #####################################################################
"

        fi

      fi

      printf "  You chose to uninstall trash for:

    ${TRASH_USERS_ARR[${ANSW}]}

  is this correct? (Y/N): "
      read TEST

      TEST=`echo ${TEST} | cut -c1`
      if [[ ${TEST} == "Y" || ${TEST} == "y" ]]; then
        USER_DEL_TRASH_ACCEPT=1
      fi

    done

}
##########---------------- END FUNCTION - SelectUser() ---------------##########


################################################################################
EndUserUninstall() {
#
# Purpose: Uninstalls trash for the current user.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: EndUserUninstall()"
  fi

  if [[ ${MULTIPLE_USERS} -eq 1 ]]; then
    USER_TRASH_HOME="${TRASH_USERS_ARR[${ANSW}]}"
    if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
      echo "DEBUG: ANSW = ${ANSW}"
      echo "DEBUG: TRASH_USERS_ARR[${ANSW}] = ${TRASH_USERS_ARR[${ANSW}]}"
      echo "DEBUG: USER_TRASH_HOME = ${USER_TRASH_HOME}"
    fi
  else
    USER_TRASH_HOME=$HOME
  fi

  cd ${USER_TRASH_HOME}

  export USER_TRASH_HOME
  . ${HDIR}/modules/FindConfFile.sh  #-- Exports "TRASHCAN_CONF_FILE" and "TDIR"
  if [[ $? -ne 0 ]]; then
    if [[ ${MULTIPLE_USERS} -eq 0 ]]; then
      exit 0;
    fi
  fi
  
  if [[ $NEXT_TRASHCAN_USER -eq 0 ]]; then   #-- Set in FindConfFile.sh
    GetConfUninstallSpecifics  #-- Function Call

    cd - 1>/dev/null

    echo ""
    echo "Uninstalling Trashcan for ${i}:"

    TDIR_Remove    #-- Function Call (removes .trash directory)
    RestoreProfile

    if [[ ${MULTIPLE_USERS} -eq 1 ]]; then

      #- If the current USER_TRASH_HOME is ROOT_HOME then the directory
      #  has already been removed
      #-----------------------------------------------------------------
      if [[ $USER_TRASH_HOME != ${ROOT_HOME} ]]; then
        RemoveFromUserList  #-- Function Call
      fi

    fi

  else
    cd - 1>/dev/null
  fi

  (( USERS_DELETED += 1 ))

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: EndUserUninstall() - Finished"
  fi

}
##########------------ END FUNCTION - EndUserUninstall() -------------##########


################################################################################
RootUninstall() {
#
# Purpose: Allows root to choose which users to uninstall trashcan for, 
#          calling EndUserUninstall() foreach.
#-------------------------------------------------------------------------------

  if [[ $TRASHCAN_DEBUG_FLAG -eq 1 ]]; then
    echo "DEBUG: RootUninstall()"
  fi

  ROOT_HOME=$HOME

  export USER_TRASH_HOME=$HOME
  . ${HDIR}/modules/FindConfFile.sh  #-- Exports "TRASHCAN_CONF_FILE" and "TDIR"

  if [[ $? -ne 0 ]]; then
    echo ""
    echo " Trashcan is not installed."
    echo ""
    exit 0;
  fi

  if [ -f "${TDIR}/users.list" ]; then

    ULFILE="${TDIR}/users.list"
    ULFILE2="${TDIR}/users.list.2"

    export MULTIPLE_USERS=1
    printf "Choose Users:

  1) Remove trash for single user
  2) Remove trash for selected users
  3) Remove trash for all users

What would you like to do? (1 - 3): "
    read ANSW

  fi

  case "${ANSW}" in

    1 ) SelectUser        #-- Function Call
        EndUserUninstall  #-- Function Call
        ;;
 
    2 ) while :
          do

            SelectUser        #-- Function Call
            EndUserUninstall  #-- Function Call

            if [[ ${DEL_ADMIN_FLAG} -eq 1 ]]; then
              break;
            fi

          done
        ;;
      
    3 ) #- Delete all user's trashcan accounts minus Administrator
        #----------------------------------------------------------
        for i in `awk -F"|" "\\$1 != \"${ROOT_HOME}\" {print \\$1}" ${TDIR}/users.list`
          do

            ANSW=1
            TRASH_USERS_ARR[${ANSW}]=${i}
            EndUserUninstall  #-- Function Call

          done

        #- Now delete Administrator's trashcan account
        #----------------------------------------------
        ANSW=1
        TRASH_USERS_ARR[${ANSW}]=${ROOT_HOME}
        EndUserUninstall  #-- Function Call

        #- Set this back to zero, since nobody will be using trashcan
        #  and we want to delete the trash script.
        #-------------------------------------------------------------
        export MULTIPLE_USERS=0
        ;;
      
  esac

}
##########-------------- END FUNCTION - RootUninstall() --------------##########



################################################################################
################################################################################
#                                                                              #
#                        P R O G R A M    C O N T R O L                        #
#                                                                              #
################################################################################
################################################################################

export MULTIPLE_USERS=0
USERS_DELETED=0
CYCLE=0

case "$LOGNAME" in

  root ) RootUninstall     #-- Function Call
         ;;

  *    ) EndUserUninstall  #-- Function Call
         ;;

esac

if [[ ${MULTIPLE_USERS} -eq 0 ]]; then

  BIN_Remove
  clear; echo "

Trash Can has been un-installed! :(
Log out and back in to reset your profile.
"

fi

exit 0;
