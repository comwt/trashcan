################################################################################
#
# Copyright (C) 2001, 2002
# by Justin Francis
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
################################################################################

clear screen 
SHL=`env | grep SHELL | awk -F/ '{print \$NF}'`   #-- Get SHELL
case "${SHL}" in
  bash)  NCR1="-n"; NCR2="";;     #-- (NCR) No Carriage Return
  ksh )  NCR1=""; NCR2="\c";;
  *   )  NCR1=""; NCR2="";;
esac

#- Trash Can Version
#-------------------
TVRSN="2.3"

echo ${NCR1} "


    +----------------------------------------------------------------------+
    |                                                                      |
    |                                                                      |
    |                                                                      |
    |  Trash Can version ${TVRSN}, Copyright (C) 2001, 2002 Justin Francis      |
    |                                                                      |
    |  Trash Can comes with ABSOLUTELY NO WARRANTY                         |
    |                                                                      |
    |  Press < 1 > see the entire GNU General Public License now, or       |
    |  press < enter > to go on:                                           |
    |                                                                      |
    |                                                                      |
    |                                                                      |
    +----------------------------------------------------------------------+ ${NCR2}"
    read ANSW

if [[ ${ANSW} == [[:digit:]] ]]; then
  if [[ ${ANSW} -eq 1 ]]; then
    clear screen
    cat ./License | more
  fi
fi

clear screen

echo "

          ###
           #     #    #   ####    #####    ##    #       #
           #     ##   #  #          #     #  #   #       #
           #     # #  #   ####      #    #    #  #       #
           #     #  # #       #     #    ######  #       #
           #     #   ##  #    #     #    #    #  #       #
          ###    #    #   ####      #    #    #  ######  ######

#######                                          #####
   #     #####     ##     ####   #    #         #     #    ##    #    #
   #     #    #   #  #   #       #    #         #         #  #   ##   #
   #     #    #  #    #   ####   ######         #        #    #  # #  #
   #     #####   ######       #  #    #         #        ######  #  # #
   #     #   #   #    #  #    #  #    #         #     #  #    #  #   ##
   #     #    #  #    #   ####   #    #          #####   #    #  #    #

                                                                                       
---------------------------------------------------------------------------

Hello.  This will install Trash Can version ${TVRSN} in your home directory."

echo ${NCR1} "Do you wish to proceed? (y/n) [Y]: ${NCR2}"
read ANSW

if [[ ${ANSW} == "" ]]; then
  ANSW="Y"
else
  ANSW=`echo ${ANSW} | cut -c1`
fi

if [[ ${ANSW} != "Y" && ${ANSW} != "y" ]]; then
  echo "bye"
  echo ""
  exit 0;
fi

TDIR=""
HDIR=${PWD}

################################################################################
Restore()
{
  #- Restore file system back to original condition
  #--------------------------------------------------
  echo ${NCR1} "Attempting to restore your filesystem ..... ${NCR2}"

  if [[ ${UPD_FLAG} -eq 1 || ${CONVERT_FLAG} -eq 1 ]]; then
    if [ -f "${HDIR}/backup/trash.tar" ]; then
      rm -fr ${TDIR}
      RESTFLAG=1
      mv ${HDIR}/backup/trash.tar ~
      cd ~; tar -Pxf trash.tar && rm -fr trash.tar; cd - 1>/dev/null
    else
      echo "AN ERROR HAS OCCURRED!"
      echo ""
      echo "The file '${HDIR}/backup/trash.bak' was created before deleting the"
      echo "directory '${TDIR}', but is now missing."
      echo ""
      echo "This error is unrecoverable, restoration has failed."
      echo ""
      exit 0;
    fi
  else
    rm -fr ${TDIR}
  fi

  #- If backup of original trash.sh exists - move back.
  #----------------------------------------------------------
  if [ -f "${HDIR}/backup/trash.sh" ]; then
    mv ${HDIR}/backup/trash.sh ${BIN}/trash.sh
  fi

  #- Remove the profile if it was created by trash_install.sh
  #----------------------------------------------------------
  if [[ ${CREATE_PFILE_FLAG} -gt 0 ]]; then
    rm -fr ${PFILE}
  fi

  echo "DONE"
  echo ""

  exit 0;
}

#- Gets the Version Number of previous trash can installs
#----------------------------------------------------------
VerChk()
{
  VERNUM=`grep "#- Version:  Trash Can" ${BIN}/trash.sh`

  if [[ ${VERNUM} != "" ]]; then
    VERNUM=`echo ${VERNUM} | awk '{print $5}'`
  fi

  if [[ ${VERNUM} == "" ]]; then
    echo ${NCR1} "An unknown version of ${BIN}/trash.sh already exists.  Replace? (y/n): ${NCR2}"
  else
    echo ${NCR1} "TrashCan Version ${VERNUM} already exists in ${BIN}.  Replace? (y/n): ${NCR2}"
  fi

  read ANSW
  ANSW=`echo ${ANSW} | cut -c1`

  if [[ ${ANSW} == "Y" || ${ANSW} == "y" ]]; then

    #- Create backup for restoration purposes
    #-------------------------------------------
    mv -f ${BIN}/trash.sh ${HDIR}/backup/trash.sh

    cp ./trash.sh ${BIN}/trash.sh
    chmod 550 ${BIN}/trash.sh

  else

    #- Restore file system back to original condition
    #--------------------------------------------------
    Restore    #-- Function call

  fi
}

#- Sets defaults values in trash.conf
#--------------------------------------
SetConfDef()
{
  echo ""
  echo "  *** GIVE CAREFUL CONSIDERATION TO THE FOLLOWING QUESTIONS:"
  echo ""
  echo ${NCR1} "How many days do you want to keep old trash? ${NCR2}"
  read KEEPDAYS
  echo ""
  echo "Trash older than ${KEEPDAYS} days old will be permanently discarded."
  echo ""
  echo "Enter the maximum size (in kilobytes) that you want to allow"
  echo "for the Trash Can below.  (e.g. If you want up to 5 Megs storage,"
  echo "enter '5000')"
  echo ${NCR1} "                 Maximum Capacity: ${NCR2}"
  read MAXTRASHCAP
  echo ""
  echo "The maximum storage capacity of Trash Can will be set to ${MAXTRASHCAP} kilobytes."
  echo "If you wish to change either of these later, you will have the chance to do so."
  echo ""
  echo ${NCR1} "Press <enter> to continue${NCR2}"; read TEST

  echo ""
  echo ${NCR1} "Setting trash.conf's DEFAULTS ..... ${NCR2}"

  ###########################################################
  #  GATHER Extra Setting
  ###########################################################
  MAXTRASHWARN=`expr ${MAXTRASHCAP} / 4 \\* 3`

  LYR=`date | awk '{print $6}'`      #-- Current Year

  #- Decrement LYR by 1 for actual
  #--------------------------------
  (( LYR -= 1 ))

  #- Get comparison for leap year table (for last year)
  #----------------------------------------------------
  LYR=`echo "${LYR}" | cut -c3-4`

  MOD=`echo "" | awk "{M=${LYR}%4; print M}"`

  #- Check to see if Last year was a leap year
  #--------------------------------------------
  if [[ ${MOD} -eq 0 ]]; then
    LASTYEAR=366
  else
    LASTYEAR=365
  fi

  ###########################################################
  #  PERFORM Setting Changes
  ###########################################################
  TCON="trash.conf"
  TCON2="trash.conf2"

  cd ${TDIR}

  sed "s/Current = null/Current = `date +%j`/" ${TCON} > ${TCON2}
  sed "s/LastYear = null/LastYear = ${LASTYEAR}/" ${TCON2} > ${TCON}
  sed "s/MaxTrashWarn = null/MaxTrashWarn = ${MAXTRASHWARN}/" ${TCON} > ${TCON2}
  sed "s/KeepDays = null/KeepDays = ${KEEPDAYS}/" ${TCON2} > ${TCON}
  sed "s/MaxTrashCap = null/MaxTrashCap = ${MAXTRASHCAP}/" ${TCON} > ${TCON2}
  mv ${TCON2} ${TCON}

  cd - 1>/dev/null

  echo "DONE"
}

#- Add to trash.conf Un-Install Specifis (UIS)
#----------------------------------------------
AddConfUIS()
{
  echo "

################################################################################
####  SET AUTOMATICALLY BY trash installation script ###########################
################################################################################
#-- Trash Un-install specifics
TrashDir = ${TDIR}
TrashBIN = ${BIN}
ProFile = ${PFILE}" >> ${TDIR}/${TCON}
}

################################################################################

#- Initialize Variables
#----------------------
NFCNT=0                         #-- Not Found CouNT
FCNT=0                          #-- Found CouNT
FLAG=0                          #-- Missing dependancy FATAL flag
NF=0                            #-- Not found

echo ${NCR1} "
Please be sure to allow the installation to exit naturally, as it
will restore your file system back to its original condition if
the installation is unsuccessful for some reason.

Press <enter> to continue${NCR2}"
read TEST

echo "
Checking for dependencies .....
"

cd ./contents

#- Check dependencies
#----------------------------------------------------
for i in `cat ./deps.list | awk -F"|" "{print \\$1}"`
  do

    FTL=`grep $i ./deps.list | awk -F"|" "{print \\$2}"`  #-- Fatal Check
    echo "Searching for '${i}'..."
    CMDP=`which ${i} 2>/dev/null`           #-- Command Path
    CMDP1=`echo ${CMDP} | cut -c1`          #-- Get first character in path

    if [[ ${CMDP1} != "/" ]]; then
      NF=1                                  
    fi

    if [[ ${NF} -ne 0 ]]; then

      #- All missing dependencies will be found then printed when finished
      #-------------------------------------------------------------------
      NF=0                      #-- Re-Initialize Not Found Flag
      (( NFCNT += 1 ))            
      MDEPS[${NFCNT}]=${i}      #-- Missing DEPendancy array
      if [[ ${FTL} == "f" ]]; then
        FLAG=1                  #-- At least one FATAL dependancy is missing
      fi

    else

      echo ${CMDP}
      (( FCNT += 1 ))            
      DLOC[${FCNT}]=${CMDP}

    fi

  done

#- Print missing dependencies & exit if fatal dependency missing
#-----------------------------------------------------------------------
if [[ NFCNT -gt 0 ]]; then

  PrintDeps()
  {
    NFCNT=1

    while [ ${NFCNT} -le ${#MDEPS[@]} ]
      do
        echo "    ${MDEPS[${NFCNT}]}"
        (( NFCNT += 1 ))
      done
  }

  if [[ ${FLAG} -eq 1 ]]; then

    echo ""
    echo "Installation could not continue."
    echo "The following dependencies could not be found:"
    echo ""
    PrintDeps  #-- Function Call
    echo ""
    echo "Please install the needed packages and try again."
    echo ""

    exit 0;

  else

    echo ""
    echo "The following dependencies were not found, however, they only"
    echo "affect certain cosmetic effects of your trash can, main func-"
    echo "tionality will still work fine:"
    echo ""
    PrintDeps  #-- Function Call
    echo ""
    echo "Press <enter> to continue..."
    read TEST
    echo ""

  fi

else

  echo ""
  echo "There were no missing dependencies..."
  echo ""

fi

echo ""
echo "Checking for existance of .trash directory..."
clear
CLF=0                                   #-- Clear Flag

if [ -d $HOME/.trash ]; then

  ANSW=0

  until [[ ${ANSW} -eq 1 || ${ANSW} -eq 2 || ${ANSW} -eq 3 ]]
    do
      if [[ ${CLF} -eq 0 ]]; then
        CLF=1
      else
        clear
      fi
      echo "
The directory \"${HOME}/.trash\" already exists.

You have three options:

  1) Have this program take control of the directory.
     (everything will be deleted from ${HOME}/.trash)
     Or, an update will occur if this directory was
     from a previous Trash Can version, while retaining
     old trash.
  2) Create a second trash directory.
  3) Abort installation until research is done.
"
      echo ${NCR1} "What would you like to do? (1,2 or 3): ${NCR2}"
      read ANSW

      if [[ ${ANSW} != [[:digit:]] ]]; then
        ANSW=0
      fi

    done

  PREXST=1

else

  ANSW=1             #-- Pre-existing .trash not found.  Setting to default.
  PREXST=0

fi

CONVERT_FLAG=0
UPD_FLAG=0

#- Based upon user's answer, create the directory, update or exit
#----------------------------------------------------------------
case "${ANSW}" in

  1 ) #-- Create / Overwrite ~/.trash

      if [[ ${PREXST} -eq 0 ]]; then
        echo ${NCR1} "Creating $HOME/.trash ..... ${NCR2}"
      else
        if [[ ! -d $HOME/.trash/can && ! -f "$HOME/.trash/trash.list" ]]; then
          echo ${NCR1} "Converting $HOME/.trash ..... ${NCR2}"
          CONVERT_FLAG=1
        else
          echo ${NCR1} "Updating $HOME/.trash ..... ${NCR2}"
          UPD_FLAG=1
        fi
        cd ~ && tar Pcf trash.tar .trash && mv trash.tar ${HDIR}/backup && cd - 1>/dev/null
        EXSTAT=$?
        if [[ ${EXSTAT} -ne 0 ]]; then
          echo "An ERROR occurred backing up your current trash directory."
          echo "EXIT STATUS: ${EXSTAT}  was returned."
          echo ""
          echo "No changes have been made to your system."
          echo ""
          exit 0;
        fi
      fi

      if [[ ${UPD_FLAG} -eq 0 ]]; then
        if [[ ${CONVERT_FLAG} -eq 1 ]]; then
          rm -fr $HOME/.trash
        fi
        mkdir $HOME/.trash && mkdir $HOME/.trash/can
      fi

      TDIR="$HOME/.trash"                  #-- Trash DIRectory
      echo "DONE"

      ;;

  2 ) #-- Create first available directory

      NUM=2
      ACCEPT=0

      while [[ ${ACCEPT} -eq 0 ]]
        do

          echo "Checking for $HOME/.trash${NUM}..."
  
          if [ -d $HOME/.trash${NUM} ]; then

            echo "Directory already exists."
            (( NUM += 1 ))

          else
        
            echo ${NCR1} "Creating $HOME/.trash${NUM} ..... ${NCR2}"
            mkdir $HOME/.trash${NUM} && mkdir $HOME/.trash${NUM}/can
            ACCEPT=1

          fi

        done

      TDIR="$HOME/.trash${NUM}"
      echo "DONE"

      ;;

  * ) #-- User wishes to exit.

      echo "Installation Terminating."
      echo ""
      exit 0;

      ;;

esac

chmod 740 ${TDIR}; chmod 740 ${TDIR}/can
chmod +t ${TDIR} ${TDIR}/can

#- Set file permissions and copy all trash.sh associated files
#  to new Trash directory.
#----------------------------------------------------------------
if [[ ${UPD_FLAG} -eq 0 ]]; then
  cp ./trash.list ${TDIR}; chmod 640 ${TDIR}/trash.list
fi

cp ./trash.conf ${TDIR}; chmod 640 ${TDIR}/trash.conf

if [ -f "${TDIR}/License" ]; then
  rm -fr ${TDIR}/License
fi

cp ../License ${TDIR}; chmod 440 ${TDIR}/License

#- Look for .profile or similar in ~
#------------------------------------
CNT=`ls $HOME/.*profile $HOME/.bashrc 2>/dev/null | wc -l`

CREATE_PFILE_FLAG=0

if [[ ${CNT} -eq 0 ]]; then

  PFILE_ARR[1]='.profile'
  PFILE_ARR[2]='.bashrc'
  PFILE_ARR[3]='.bash_profile'
  PFILE_ARR[4]='OTHER (not listed)'
  PFILE_ARR[5]='Abort installation until research is done.'

  CHOICE=0
  STEP=0

  while [[ ${CHOICE} -eq 0 ]]
    do

      clear
      echo ""
      echo "No viable profile was found."
      echo ""
      echo "Depending on your platform you will need a different profile"
      echo "to execute when you log in:"
      echo ""

      for i in "${PFILE_ARR[@]}"
        do
          (( STEP += 1 ))
          echo "  ${STEP}.\t${i}"
        done

      echo "  -------------------------------------------------"
      echo ${NCR1} "  Enter Choice: ${NCR2}"
      read CHOICE

      if [[ ${CHOICE} != [[:digit:]] ]]; then
        continue;
      fi

      if [[ ${CHOICE} -ge 1 && ${CHOICE} -le ${#PFILE_ARR[@]} ]]; then

        case "${CHOICE}" in

          [1-3] ) PFILE=${PFILE_ARR[${CHOICE}]}
                  ACCEPT=1; CHOICE=1 ;;

          4     ) ACCEPT=0; while [[ ${ACCEPT} -eq 0 ]]
                    do
                      echo ""
                      echo ${NCR1} "Please type your profile's name (include the dot): ${NCR2}"; read PFILE
                      echo ""
                      echo ${NCR1} "You have chosen '${PFILE}', is this correct? (y/n): ${NCR2}"; read TEST

                      TEST=`echo ${TEST} | cut -c1`
                      if [[ ${TEST} == "Y" || ${TEST} == "y" ]]; then
                        ACCEPT=1; CHOICE=1
                      else
                        STEP=0; CHOICE=0; break;
                      fi 
                    done
                  ;;

          5     ) Restore ;;

          *     ) continue ;;

        esac

      fi

    done

  PFILE="$HOME/${PFILE}"
  > ${PFILE}

  CREATE_PFILE_FLAG=1

elif [[ ${CNT} -eq 1 ]]; then

  PFILE=`ls $HOME/.*profile $HOME/.bashrc 2>/dev/null`

elif [[ ${CNT} -gt 1 ]]; then

  ANSW=0
  CNT=1

  while [[ ${ANSW} -eq 0 ]]
    do

      clear
      echo ""
      echo "One of the files below needs to be modified for your Trash Can:"
      echo ""

      for i in `ls $HOME/.*profile $HOME/.bashrc`
        do
          PFILEARR[${CNT}]=${i}      #-- Profile Array
          echo "    ${CNT}) ${i}"
          (( CNT += 1 ))
        done

      echo "    ${CNT}) Need to research - EXIT"
      echo ""
      echo ${NCR1} "Enter the number of the file you wish to update: ${NCR2}"
      read ANSW

      if [[ ${ANSW} != [[:digit:]] ]]; then
        ANSW=0
      fi

      if [[ ${ANSW} -gt 0 && ${ANSW} -lt ${CNT} ]]; then
        PFILE=${PFILEARR[${ANSW}]}
      elif [[ ${ANSW} -eq ${CNT} ]]; then
        echo "Installation Terminating."
        echo ""
        Restore          #-- Function call
      else
        ANSW=0
        CNT=1
      fi

    done

fi

#- Check for existance of /bin directory
#----------------------------------------
if [ -d /usr/bin ]; then
  BIN=/usr/bin
elif [ -d /usr/local/bin]; then
  BIN=/usr/local/bin
elif [ -d /bin]; then
  BIN=/bin
elif [ -d /usr/sbin]; then
  BIN=/usr/sbin
elif [ -d /sbin]; then
  BIN=/sbin
fi

ANSW3=0

while [[ ${ANSW3} -ne 1 && ${ANSW3} -ne 2 ]]
  do

    clear

    #- User chooses path for executable to reside in
    #---------------------------------------------------
    echo "Possible paths for the executable to reside in:"
    echo ""
    echo "  1) ${TDIR} (DEFAULT - Personal Use)"
    echo "  2) ${BIN} (Multiple users - Root Privileges Required)"
    echo ""
    echo ${NCR1} "Which would you prefer? ${NCR2}"
    read ANSW3

    if [[ ${ANSW3} != [[:digit:]] ]]; then
      ANSW3=0
    fi

    if [[ ${ANSW3} -eq 1 ]]; then
      RFLAG=0
      BIN=${TDIR}
    elif [[ ${ANSW3} -eq 2 ]]; then
      RFLAG=1
    fi

  done

ChkExistTrash()
{
  if [ -f "${BIN}/trash.sh" ]; then

    VerChk  #-- Function Call (VERNUM is set; transfer is verified)

  else

    cp ${HDIR}/contents/trash.sh ${BIN}/trash.sh
    chmod 550 ${BIN}/trash.sh

  fi
}

#- If root user is needed . . .
#--------------------------------
if [[ ${RFLAG} -eq 1 ]]; then

  if [[ $LOGNAME == "root" ]]; then

    ChkExistTrash  #-- Function Call

    if [ ! -f "${BIN}/trash.sh" ]; then

      echo "An error occurred.  Please research the problem and try again."
      echo "After doing so, if you still can't get a successful install, and it"
      echo "is DEFINITELY not a system problem on your end, then feel free to"
      echo "email me at: trash_can_bugs@yoursitemaster.com with any information"
      echo "you can provide that may help me figure out what went wrong."
      echo ""

      Restore

    fi

  else

    echo ""
    echo "YOU NEED TO BE ROOT TO PERFORM THIS ACTION."
    echo ""
    echo "Please login as root and try again, or start over and choose to"
    echo "have the executable reside in your home trash directory."
    echo ""

    Restore

  fi

else

  ChkExistTrash  #-- Function Call (If exists, modify, else, create)

fi

#- Modify the profile file
#----------------------------------------------------------------------
echo ${NCR1} "Modifying ${PFILE} to accomodate the new Trash Can ..... ${NCR2}"

#- Temporary file for sed output
#--------------------------------
PFILE2="trash_install_SED.out"

if [ -f "${PFILE}" ]; then
  #- Delete Old entries if they exist
  #------------------------------------
  sed '/^\#- Trash Can/d' ${PFILE} > ${PFILE2}
  sed '/TRASHDIR/d' ${PFILE2} > ${PFILE}
  sed '/^TBINDIR/d' ${PFILE} > ${PFILE2}
  sed '/^purge \#-- Daily Old Trash Purge/d' ${PFILE2} > ${PFILE}
fi

#- Create new trash can entries
#------------------------------------
echo "#- Trash Can
TRASHDIR=${TDIR}   #-- User's TRASH DIRectory
TBINDIR=${BIN}     #-- Trash BINary DIRectory
alias delete=\"\${TBINDIR}/trash.sh -rest \${TRASHDIR} -d \"
alias empty=\"\${TBINDIR}/trash.sh -empty \${TRASHDIR} \"
alias prm=\"\${TBINDIR}/trash.sh -prm \${TRASHDIR} \"
alias purge=\"\${TBINDIR}/trash.sh -purge \${TRASHDIR} \"
alias trestore=\"\${TBINDIR}/trash.sh -rest \${TRASHDIR} \"
alias rm=\"\${TBINDIR}/trash.sh -rm \${TRASHDIR} \"  #-- Same as 'throw'
alias throw=\"\${TBINDIR}/trash.sh -rm \${TRASHDIR} \"  #-- Same as 'rm'
alias tkeep=\"\${TBINDIR}/trash.sh -keep \${TRASHDIR} \"  #-- Configure keep days
alias tmax=\"\${TBINDIR}/trash.sh -tmax \${TRASHDIR} \"  #-- Configure capacity
alias trash=\"\${TBINDIR}/trash.sh -list \${TRASHDIR} \"  #-- Trash Specs/Contents
purge #-- Daily Old Trash Purge" >> ${PFILE}
echo "DONE"

#- Set Trash Configuration File Defaults
#-----------------------------------------------
SetConfDef  #-- Function Call

#- Write Un-Install Specifics to trash.conf
#-----------------------------------------------
AddConfUIS  #-- Function Call

clear
echo "


Installation has successfully completed!

You are now ready to use your new trash can.
Just re-invoke ${PFILE} with the command:

    . ${PFILE}

Then type the command 'trash' to see what the programs
capabilities are and a list of commands.

Enjoy the benefits of file recovery.
"

exit 0;
